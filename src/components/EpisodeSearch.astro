---
import { getCollection } from "astro:content";
import { Image } from "astro:assets";
import { removeUnnecessaryNewLines } from "../utils/texts";

// Get all episodes and transcriptions
const episodes = (await getCollection("episode")).sort((a, b) => b.data.pubDate.valueOf() - a.data.pubDate.valueOf());

// Get all transcriptions
const transcriptions = await getCollection("transcription");

// Create a map of transcriptions by episode ID
const transcriptionMap = new Map();
for (const transcription of transcriptions) {
  transcriptionMap.set(transcription.id, transcription.data);
}

// Prepare searchable data
const searchData = episodes.map((episode) => {
  const transcription = transcriptionMap.get(episode.id);
  const transcriptionText = transcription 
    ? transcription.segments.map((seg: { text: string }) => seg.text).join(' ')
    : '';
  
  return {
    id: episode.id,
    number: episode.data.number,
    title: episode.data.title,
    description: episode.data.description,
    summary: episode.data.summary,
    image: episode.data.image,
    pubDate: episode.data.pubDate.toISOString(),
    season: episode.data.season,
    transcriptionText: transcriptionText,
  };
});
---

<div class="search-container">
  <div class="search-input-wrapper">
    <svg class="search-icon" width="20" height="20" viewBox="0 0 20 20" fill="none" xmlns="http://www.w3.org/2000/svg">
      <path d="M9 17A8 8 0 1 0 9 1a8 8 0 0 0 0 16zM18 18l-4.35-4.35" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
    </svg>
    <input
      type="text"
      id="episode-search"
      class="search-input"
      placeholder="エピソードを検索（タイトル、説明文、文字起こしから検索）"
    />
    <button id="clear-search" class="clear-button" style="display: none;">
      <svg width="20" height="20" viewBox="0 0 20 20" fill="none" xmlns="http://www.w3.org/2000/svg">
        <path d="M15 5L5 15M5 5l10 10" stroke="currentColor" stroke-width="2" stroke-linecap="round"/>
      </svg>
    </button>
  </div>
  <div id="search-results-info" class="search-info"></div>
  <ul id="episode-list" class="episode-list">
    {
      episodes.map((episode) => {
        const japanTime = new Date(episode.data.pubDate.toLocaleString("en-US", { timeZone: "Asia/Tokyo" }));
        return (
          <li data-episode-id={episode.id}>
            <a href={`/episode/${episode.data.number}`} class="container">
              <Image class="image" width="150" height="150" src={episode.data.image} alt={`${episode.data.title}のサムネイル`} />
              <div class="info">
                <p class="date">
                  <time class="time" datetime={japanTime.toISOString()}>
                    {japanTime.toLocaleDateString("ja-JP", {
                      year: "numeric",
                      month: "short",
                      day: "numeric",
                    })}
                  </time> / S{episode.data.season}・EP{episode.data.number}
                </p>
                <p class="title">{episode.data.title}</p>
                <p class="description">
                  {removeUnnecessaryNewLines(episode.data.summary)}
                </p>
              </div>
            </a>
          </li>
        );
      })
    }
  </ul>
</div>

<script define:vars={{ searchData }}>
  const searchInput = document.getElementById('episode-search');
  const clearButton = document.getElementById('clear-search');
  const episodeList = document.getElementById('episode-list');
  const searchResultsInfo = document.getElementById('search-results-info');

  function normalizeText(text) {
    return text.toLowerCase().trim();
  }

  function searchEpisodes(query) {
    const normalizedQuery = normalizeText(query);
    
    if (!normalizedQuery) {
      // Show all episodes
      const allItems = episodeList.querySelectorAll('li');
      allItems.forEach(item => {
        item.style.display = '';
      });
      searchResultsInfo.textContent = '';
      clearButton.style.display = 'none';
      return;
    }

    clearButton.style.display = 'block';

    // Search through episodes
    const results = searchData.filter(episode => {
      const titleMatch = normalizeText(episode.title).includes(normalizedQuery);
      const descriptionMatch = normalizeText(episode.description).includes(normalizedQuery);
      const summaryMatch = normalizeText(episode.summary).includes(normalizedQuery);
      const transcriptionMatch = episode.transcriptionText && normalizeText(episode.transcriptionText).includes(normalizedQuery);
      
      return titleMatch || descriptionMatch || summaryMatch || transcriptionMatch;
    });

    // Update visibility of episodes
    const allItems = episodeList.querySelectorAll('li');
    const resultIds = new Set(results.map(r => r.id));
    
    allItems.forEach(item => {
      const episodeId = item.getAttribute('data-episode-id');
      if (resultIds.has(episodeId)) {
        item.style.display = '';
      } else {
        item.style.display = 'none';
      }
    });

    // Update search info
    if (results.length === 0) {
      searchResultsInfo.textContent = '検索結果が見つかりませんでした';
    } else {
      searchResultsInfo.textContent = `${results.length}件のエピソードが見つかりました`;
    }
  }

  // Event listeners
  searchInput.addEventListener('input', (e) => {
    searchEpisodes(e.target.value);
  });

  clearButton.addEventListener('click', () => {
    searchInput.value = '';
    searchEpisodes('');
  });
</script>

<style>
  .search-container {
    width: 100%;
  }

  .search-input-wrapper {
    position: relative;
    margin-bottom: 16px;
  }

  .search-icon {
    position: absolute;
    left: 16px;
    top: 50%;
    transform: translateY(-50%);
    color: var(--text-secondary);
    pointer-events: none;
  }

  .search-input {
    width: 100%;
    padding: 12px 48px 12px 48px;
    font-size: 1rem;
    border: 2px solid var(--border);
    border-radius: 8px;
    background-color: var(--background);
    color: var(--text-primary);
    transition: border-color 0.2s;
  }

  .search-input:focus {
    outline: none;
    border-color: var(--accent);
  }

  .clear-button {
    position: absolute;
    right: 12px;
    top: 50%;
    transform: translateY(-50%);
    background: none;
    border: none;
    cursor: pointer;
    padding: 4px;
    color: var(--text-secondary);
    display: flex;
    align-items: center;
    justify-content: center;
    border-radius: 4px;
    transition: background-color 0.2s;
  }

  .clear-button:hover {
    background-color: var(--border);
  }

  .search-info {
    margin-bottom: 16px;
    color: var(--text-secondary);
    font-size: 0.9rem;
  }

  .episode-list {
    display: flex;
    flex-wrap: wrap;
    gap: 2rem;
    list-style-type: none;
    margin: 0;
    padding: 0;
  }

  .episode-list li {
    width: 100%;
    transition: opacity 0.2s;
  }

  .container {
    display: grid;
    grid-template-columns: 150px 1fr;
    gap: 16px;
    text-decoration: none;
    color: var(--text-primary);
    width: 100%;
    @media (max-width: 720px) {
      grid-template-columns: 60px 1fr;
    }
  }

  .image {
    border-radius: 4px;
    flex-shrink: 0;
    width: 100%;
    height: auto;
  }

  .info {
    flex-shrink: 1;
  }

  .date {
    display: block;
    font-size: 0.8rem;
    font-weight: 400;
    line-height: 1;
    margin: 0;
  }

  .time {
    display: inline;
  }

  .title {
    font-size: 1.2rem;
    font-weight: 600;
    margin: 0;
  }

  .description {
    margin: 0;
    font-size: 1rem;
    line-height: 1.4;
    font-weight: 400;
    overflow: hidden;
    display: -webkit-box;
    -webkit-box-orient: vertical;
    -webkit-line-clamp: 4;
  }
</style>
