name: Update Speaker Names

on:
  issue_comment:
    types: [created]

jobs:
  update-speakers:
    # Only run if the comment is on a pull request and starts with "speaker"
    if: github.event.issue.pull_request && startsWith(github.event.comment.body, 'speaker ')
    runs-on: ubuntu-latest
    
    permissions:
      contents: write
      pull-requests: write
    
    steps:
      - name: Parse speaker names from comment
        id: parse
        run: |
          COMMENT="${{ github.event.comment.body }}"
          # Remove "speaker " prefix and extract names
          NAMES=$(echo "$COMMENT" | sed 's/^speaker //')
          echo "names=$NAMES" >> $GITHUB_OUTPUT
          echo "Parsed speaker names: $NAMES"
      
      - name: Get PR branch
        id: pr
        uses: actions/github-script@v7
        with:
          script: |
            const pr = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number
            });
            return {
              ref: pr.data.head.ref,
              sha: pr.data.head.sha
            };
      
      - name: Checkout PR branch
        uses: actions/checkout@v4
        with:
          ref: ${{ fromJson(steps.pr.outputs.result).ref }}
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      
      - name: Get changed JSON files
        id: files
        run: |
          # Get all JSON files in the PR
          git fetch origin main
          FILES=$(git diff --name-only origin/main...HEAD | grep '\.json$' | grep 'src/content/transcription/' || echo "")
          if [ -z "$FILES" ]; then
            echo "No transcription JSON files found in this PR"
            echo "files=" >> $GITHUB_OUTPUT
          else
            echo "Found JSON files: $FILES"
            # Convert newlines to spaces for passing to script
            FILES_SPACE=$(echo "$FILES" | tr '\n' ' ')
            echo "files=$FILES_SPACE" >> $GITHUB_OUTPUT
          fi
      
      - name: Update speaker names
        if: steps.files.outputs.files != ''
        run: |
          node scripts/update-speakers.cjs "${{ steps.parse.outputs.names }}" ${{ steps.files.outputs.files }}
      
      - name: Commit and push changes
        if: steps.files.outputs.files != ''
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          
          if git diff --quiet; then
            echo "No changes to commit"
          else
            git add .
            git commit -m "Update speaker names: ${{ steps.parse.outputs.names }}"
            git push
          fi
      
      - name: Add reaction to comment
        if: steps.files.outputs.files != ''
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.reactions.createForIssueComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: context.payload.comment.id,
              content: 'rocket'
            });
      
      - name: Reply to comment
        if: steps.files.outputs.files != ''
        uses: actions/github-script@v7
        with:
          script: |
            const names = '${{ steps.parse.outputs.names }}'.split(' ');
            const mapping = names.map((name, i) => `Speaker ${String.fromCharCode(65 + i)} → ${name}`).join('\n');
            
            github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: `✅ Speaker names updated!\n\n${mapping}`
            });
      
      - name: Reply if no files found
        if: steps.files.outputs.files == ''
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: '⚠️ No transcription JSON files found in this PR. Please make sure there are JSON files in `src/content/transcription/` directory.'
            });
